---
import type { GetStaticPaths } from "astro";
import { Icon } from "astro-icon/components";
import MainLayout from "@layouts/MainLayout.astro";
import PokemonCard from "@components/pokemons/PokemonCard.astro";
import type { PokemonListResponse } from "@interfaces/pokemon-list.response";
import Title from "@components/shared/Title.astro";

// La función getStaticPaths en Astro se utiliza para definir qué rutas dinámicas deben ser generadas de manera estática en el tiempo de compilación.
// Similar a Next.js, pero adaptado a la forma en que Astro trabaja con el contenido estático
// https://docs.astro.build/en/reference/api-reference/#getstaticpaths
// Con getStaticPaths creo en BUILD TIME esto argumentos dinamicos
// Solo estas paginas van a existir, las demas daran 404
// Definir rutas estáticas dinámicamente
export const getStaticPaths = (async () => {
  // Definir los nombres de los Pokémon que se generarán como rutas estáticas
  const resp = await fetch("https://pokeapi.co/api/v2/pokemon?limit=151");
  const { results } = (await resp.json()) as PokemonListResponse;

  return results.map(({ name, url }) => ({
    params: { name: name },
    props: { name: name, url: url },
  }));
}) satisfies GetStaticPaths;

const { name } = Astro.params; // Acceder al parámetro dinámico 'name' desde Astro.params
const { url } = Astro.props;
const id = url.split("/").at(-2);
const audioSrc = `https://raw.githubusercontent.com/PokeAPI/cries/main/cries/pokemon/latest/${id}.ogg`;
const imageSrc = `https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/other/official-artwork/${id}.png`;
---

<MainLayout
  title={`Pokémon - #${id} ${name}`}
  description={`Información sobre el pokémon ${name}`}
  image={imageSrc}
>
  <section class="mt-10 mx-10 flex flex-col justify-center items-center">
    <div>
      <button class="text-blue-500" onclick="history.back()">Regresar</button>
      <Title>{name}</Title>
    </div>
    <button id="btn-favorite" class="ml-4" data-name={name} data-id={id}>
      <Icon data-outline name="heart-outline" size={50} />
      <Icon data-full class="hidden" name="heart-full" size={50} />
    </button>
    <PokemonCard name={name} url={url} isBig />
    <audio controls class="mt-5">
      <source src={audioSrc} type="audio/ogg" />
      Your browser does not support the audio element.
    </audio>
  </section>
</MainLayout>

<script>
  import type { FavoritePokemon } from "@interfaces/favorite-pokemon";
  const handlePageLoad = () => {
    let favoritePokemons: FavoritePokemon[] = JSON.parse(
      localStorage.getItem("favorites") ?? "[]"
    );

    const btnFavorite = document.querySelector(
      "#btn-favorite"
    ) as HTMLButtonElement;

    if (!btnFavorite) return;

    const name = btnFavorite.dataset.name ?? "";
    const id = btnFavorite.dataset.id ?? "";
    const isFavorite = favoritePokemons.some((fav) => fav.name === name);

    const heartOutline = btnFavorite.querySelector(
      "[data-outline]"
    ) as HTMLElement;

    const heartFull = btnFavorite.querySelector("[data-full]") as HTMLElement;

    // Hagan la función para mostrar o ocultar el corazón lleno
    if (isFavorite) {
      heartOutline.classList.add("hidden");
      heartFull.classList.remove("hidden");
    }

    const toggleFavorite = () => {
      const isFavorite = favoritePokemons.some((fav) => fav.name === name);

      if (isFavorite) {
        // Remover
        favoritePokemons = favoritePokemons.filter((fav) => fav.name !== name);
      } else {
        // Agregar
        favoritePokemons.push({
          id: +id,
          name: name,
        });
      }

      localStorage.setItem("favorites", JSON.stringify(favoritePokemons));
    };

    btnFavorite.addEventListener("click", () => {
      heartOutline.classList.toggle("hidden");
      heartFull.classList.toggle("hidden");

      toggleFavorite();
    });
  };

  document.addEventListener("astro:page-load", handlePageLoad);
</script>

<style>
  a {
    @apply hover:underline text-blue-500;
  }

  #btn-favorite {
    @apply hover:animate-pulse;
  }
</style>
